// server.js
const express = require('express');
const rateLimit = require('express-rate-limit');
const cors = require('cors');
const bodyParser = require('body-parser');
const axios = require('axios');
const dotenv = require('dotenv');
const crypto = require('crypto');

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Rate Limiter
const limiter = rateLimit({
  windowMs: 1 * 60 * 1000,
  max: 60,
});
app.use(limiter);

// Health Check
app.get('/', (req, res) => {
  res.send('ðŸŸ¢ Wallet Recovery API is running');
});

// Balance Checker Endpoint
app.post('/balance-check', async (req, res) => {
  const { address } = req.body;

  if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {
    return res.status(400).json({ error: 'Invalid wallet address format.' });
  }

  try {
    // Ethereum balance
    const ethResponse = await axios.post(`https://mainnet.infura.io/v3/${process.env.INFURA_API_KEY}`, {
      jsonrpc: '2.0',
      method: 'eth_getBalance',
      params: [address, 'latest'],
      id: 1,
    });
    const ethBalance = parseInt(ethResponse.data.result, 16) / 1e18;

    // Binance Smart Chain balance
    const bscResponse = await axios.post('https://bsc-dataseed.binance.org/', {
      jsonrpc: '2.0',
      method: 'eth_getBalance',
      params: [address, 'latest'],
      id: 1,
    });
    const bnbBalance = parseInt(bscResponse.data.result, 16) / 1e18;

    res.json({ eth: ethBalance, bnb: bnbBalance });
  } catch (error) {
    console.error('Balance check failed:', error.message);
    res.status(500).json({ error: 'Blockchain query failed' });
  }
});

// Encrypted Recovery Log
app.post('/log-recovery', async (req, res) => {
  const { encryptedData } = req.body;

  if (!encryptedData) {
    return res.status(400).json({ error: 'No encrypted data provided.' });
  }

  const timestamp = new Date().toISOString();
  const id = crypto.randomBytes(16).toString('hex');

  // Store securely or send to log service
  console.log(`[Recovery Log ${timestamp}] #${id} :: ${encryptedData}`);

  res.status(200).json({ success: true, id });
});

app.listen(PORT, () => {
  console.log(`ðŸš€ Server running at http://localhost:${PORT}`);
});
